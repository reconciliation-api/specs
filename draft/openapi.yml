openapi: "3.1.0"
info:
  title: Reconciliation API - OpenAPI 3.1
  summary: OpenAPI definition of the Reconciliation API
  description: |-
    Web API letting clients match data against a database hosted by the service.

    Some useful links:
      - [ W3C Entity Reconciliation Community Group ](https://www.w3.org/community/reconciliation/)
      - [ Source code for Reconciliation API ](https://github.com/reconciliation-api/specs)
      - [ List of known public endpoints ](https://reconciliation-api.github.io/testbench/)
      - [ OpenRefine wiki list of reconciliable data sources ](https://github.com/OpenRefine/OpenRefine/wiki/Reconciliable-Data-Sources)
  contact:
    name: W3C Entity Reconciliation Community Group
    url: https://www.w3.org/community/reconciliation/
    email: public-reconciliation@w3.org
  license:
    name: W3C Community Final Specification Agreement (FSA)
    url: https://www.w3.org/community/about/process/fsa-deed/
####
# version: is the version of this document not the version of the Reconciliation API.
#          when updating this document, please bump this version below:
####
  version: 0.0.1

externalDocs:
  description: Find out more about Reconciliation API
  url: https://reconciliation-api.github.io

# tags:
#   - name: manifest
#     description: the service manifest 
#   - name: reconciliation
#     description: |-
#       the process of linking entities or records with
#       other entities or records
#     externalDocs:
#       description: Wikidata URL for "data reconciliation"
#       url: https://www.wikidata.org/wiki/Q48719515
#   - name: entity
#     description: a record in the data source exposed by the service
#     externalDocs:
#       description: Wikidata URL for "entity"
#       url: https://www.wikidata.org/wiki/Q35120

paths:
  /:
    get:
      operationId: getManifest
      tags:
        - Service Definition
      summary: Retrieve the service manifest
      responses:
        '200':
          description: Service manifest
          content:
            application/json:
              schema:
                name: service manifest
                type: object
                $ref: '#/components/schemas/manifest'
              example:
                $ref: examples/manifest/valid/getty.json
  /reconcile:
    post:
      operationId: reconciliationQueries
      tags:
        - Reconcile
      summary: Submit a batch of reconciliation queries
      requestBody:
        required: true
        description: "A batch of reconciliation queries"
        content:
          application/json:
            schema:
              $ref: schemas/reconciliation-query-batch.json
            example:
              $ref: examples/reconciliation-query-batch/valid/example-full.json
      responses:
        '200':
          description: Reconciliation candidates for each query
          content:
            application/json:
              schema:
                $ref: schemas/reconciliation-result-batch.json
              example:
                $ref: examples/reconciliation-result-batch/valid/example-full.json
  /suggest/entity:
    get:
      operation: suggestEntities
      tags:
        - Suggest
      summary: Retrieve auto-complete suggestions for entities
      parameters:
        - name: prefix
          in: query
          required: true
          description: "the search string input by the user"
          schema:
            type: string
        - name: cursor
          in: query
          required: false
          description: "a number of results to skip"
          schema:
            type: integer
      responses:
        '200':
          description: A list of entities suitable for displaying in a drop-down auto-complete widget
          content:
            application/json:
              schema:
                $ref: schemas/suggest-entities-response.json
              example:
                $ref: examples/suggest-entities-response/valid/example.json
  /suggest/property:
    get:
      operation: suggestProperties
      tags:
        - Suggest
      summary: Retrieve auto-complete suggestions for properties
      parameters:
        - name: prefix
          in: query
          required: true
          description: "the search string input by the user"
          schema:
            type: string
        - name: cursor
          in: query
          required: false
          description: "a number of results to skip"
          schema:
            type: integer
      responses:
        '200':
          description: A list of properties suitable for displaying in a drop-down auto-complete widget
          content:
            application/json:
              schema:
                $ref: schemas/suggest-properties-response.json
              example:
                $ref: examples/suggest-properties-response/valid/example.json
  /suggest/type:
    get:
      operation: suggestTypes
      tags:
        - Suggest
      summary: Retrieve auto-complete suggestions for types
      parameters:
        - name: prefix
          in: query
          required: true
          description: "the search string input by the user"
          schema:
            type: string
        - name: cursor
          in: query
          required: false
          description: "a number of results to skip"
          schema:
            type: integer
      responses:
        '200':
          description: A list of types suitable for displaying in a drop-down auto-complete widget
          content:
            application/json:
              schema:
                $ref: schemas/suggest-types-response.json
              example:
                $ref: examples/suggest-types-response/valid/example.json
  /preview:
    get:
      operation: preview
      tags:
        - Preview
      summary: Retrieve a compact representation of an entity as an HTML page
      parameters:
        - name: id
          in: query
          required: true
          description: an entity id
          schema:
            type: string
      responses:
        '200':
          description: "A web page describing the entity"
          content:
            text/html:
              example: "test"
  /extend:
    post:
      operation: extend
      tags:
        - Extend
      summary: Retrieve the values of properties on a list of entities
      requestBody:
        required: true
        description: "A list of entities and the properties to fetch on them"
        content:
          application/json:
            schema:
              $ref: schemas/data-extension-query.json
            example:
              $ref: examples/data-extension-query/valid/example-full.json
      responses:
        '200':
          description: The values of the properties on those entities
          content:
            application/json:
              schema:
                $ref: schemas/data-extension-response.json
              example:
                $ref: examples/data-extension-response/valid/example-full.json
  /extend/propose:
    get:
      operation: proposeProperties
      tags:
        - Extend
      summary: List properties commonly fetched on entities of a given type
      parameters:
        - name: type
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: A list of properties which could be fetched on entities of the provided type
          content:
            application/json:
              schema:
                $ref: schemas/data-extension-property-proposal.json
              example:
                $ref: examples/data-extension-property-proposal/valid/response.json

components:
  schemas:

    identifier:
      type: string
      name: id
      description: a unique character string that identifies an entity

    entity:
      required:
        - id
        - name
      summary: |-
        An entity is a record in the data source exposed by the service.
        For each entity, expanding the template with 'id' being set to
        the entity's identifier MUST result in a valid URI.
      type: object
      properties:
        id:
          type: string
          description: |-
           an identifier for the entity.
           This identifier must be unique among all entities.
           Services for which the entity's identifier is already a full URI
           can use the '{+id}'' template, which disables the escaping of some characters
           when inserting the identifier in the URI template.
          $ref: '#/components/schemas/URI-template'
        name:
          type: string
          description: a name, which is also a non-empty string
        description:
          type: string
          description: an optional description as a human-readable string
        type:
          type: array
          description: an array of types, possibly empty
          $ref: '#/components/schemas/type'

    type:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          description: |-
           a unique identifier for the type.
           This identifier must be unique among all types.
        name:
          type: string
          description: a human-readable name for the type which is a non-empty string
        broader:
          type: array
          description: |-
           an optional array of types, each representing a direct (i.e., immediate) 'broader' [skos-reference] category of [entities]: /entity
          $ref: 'https://www.w3.org/TR/skos-reference/#semantic-relations'

    property:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          description: |-
           an identifier, which is a non-empty string.
           This identifier must be unique among all properties
        name:
          type: string
          description: a human-readable name for the property
    
    property-value:
      type: string
      description: a value for a property
      enum:
        - string
        - boolean
        - integer
        - float
        - entity

    manifest:
      required:
        - versions
        - name
        - defaultTypes
      type: object
      properties:
        versions:
          type: array
          description: The array of API versions supported by the endpoint, such as ["0.1", "0.2"]. Since this field did not exist in version 0.1, services which do not declare a versions field are expected to only support version 0.1.
          examples: ["0.1", "0.2"]
        name:
          type: string
          description: |-
           a human-readable name for the service,
           generally the name of the database it exposes.
           In the case where multiple reconciliation services exist for the same database,
           it is in the interest of a service to bear a meaningful name
           which will help disambiguating it from others
          examples: [myReconService]
        defaultTypes:
          type: array
          description: |-
           an array of types which are considered sensible default choices as types
           supplied in reconciliation queries. For services which do not rely on types,
           this MAY contain a single type with a generic name
           making it clear that all entities in the database are instances of this type.
        documentation:
          type: string
          format: uri
          description: |-
           an optional URL with human-readable documentation about the service,
           for instance giving more information about the data it exposes.
        logo:
          type: string
          format: uri
          description: An optional URL of a square image which can be used as the service's logo.
        serviceVersion:
          type: string
          description: |-
           an optional string which describes the version of the software exposing this service.
           This is not to be confused with `versions`[array] property
           which is about the versions of the reconciliation API supported by the service.
        view:
          type: object
          description: |-
           an object which contains a single field url.
           Its value is a URI template for entities
           $ref: '#/components/schemas/URI-template'
          items:
            url:
              type: string
              format: uri
              description: a URI template for entities
              externalDocs:
                description: a URI template as defined by RFC6570
                url: https://www.rfc-editor.org/rfc/rfc6570
              examples: ["http://www.wikidata.org/entity/{id}"]
        feature_view:
          type: object
          description: An object which contains a url field pointing to a human-readable web page which can be used to view matching features.
          items:
            url:
              type: string
              format: uri
              description: a URI template for features
              externalDocs:
                description: a URI template as defined by RFC6570
                url: https://www.rfc-editor.org/rfc/rfc6570
              examples: ["http://www.wikidata.org/entity/{id}"]
        suggest:
          type: object
          description: |-
            an optional object which may contain the following fields,
            depending on which suggest services are offered
          $ref: 'https://reconciliation-api.github.io/specs/draft/#suggest-services'
          items:
            entity:
              type: boolean
## TODO: Verify that descriptions allow for CommonMark spec allows this kind of Link reference definitions
##
##       > The following properties are taken from the JSON Schema specification but their definitions have been extended by the OAS:
##       > description - [CommonMark](https://spec.commonmark.org/) syntax MAY be used for rich text representation.
##       > format - See Data Type Formats for further details. While relying on JSON Schema's defined formats, the OAS offers a few additional predefined formats.
##
##       https://spec.commonmark.org/0.31.2/#link-reference-definitions
##       and that it navigates well in OAS editors.
              description: A boolean indicating if the service supports auto-suggestion of [entity]: /suggest/entity "entities"
            property:
              type: boolean
              description: A boolean indicating if the service supports auto-suggestion of [property]: /suggest/property "properties"
            type:
              type: boolean
              description: A boolean indicating if the service supports auto-suggestion of [type]: /type "types"
        extend:
          type: object
          description: |-
            A data extension metadata, supplied if the service offers a data extension service
    
    data-extension-metadata:
      propose_properties:
        type: boolean
        description: |-
          a boolean indicating if the service supports `data extension property proposal`
      property_settings:
        type: array
        description: |-
          an array of [data-extension-property-settings]: /data-extension-property-settings 

    data-extension-property-settings:
      name:
        type: string
        description: |-
          a name for the setting, which identifies the setting uniquely
      label:
        type: string
        description: |-
          a human-readable label, which is used when presenting the setting to the user in a form
      type:
        type: string
        description: |-
          a data type, which can be one of the strings `number, `text`, `checkbox`, or `select`.
          This determines which type of value the property setting is expected to store.
          Clients SHOULD render this setting with the corresponding HTML element
      default:
        type: string
        description: |-
          a default value for the setting, when not provided or left untouched by the user
      help_text:
        type: string
        description: |-
          a help text, which describes the meaning of the field to the user.
          This is meant to be a short string that can be displayed alongside the corresponding form field
      choices:
        type: array
        description: |-
          If type is `select`, an array of property setting choices.
## TODO: add more schema and their properties
##       and clean up the schema
##       and add examples
##       and add references and more inline link reference definitions
##       https://spec.commonmark.org/0.31.2/#link-reference-definitions

    reconcile-query-batch:
      type: object
      description: |-
        This schema validates the JSON serialization of any reconciliation query batch,
        i.e. the payload of a POST to a reconciliation endpoint.

